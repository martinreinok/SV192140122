IMPORTS{
	import gradeAdministration.Course;
	import gradeAdministration.Main;
	import gradeAdministration.Student;
}

GLOBAL{

	VARIABLES{
		Clock dataDelay = new Clock();
	}

	EVENTS{
		addGrade(Course c, int grade) = {c.addGrade(arg1, grade)}

		addGradeUpdated() = {*.updateStudentCredits()}

		dataDelayAt5() = {dataDelay@5}
	}

	PROPERTY prop1 {
		STATES{
			BAD{badGrade }
			NORMAL{okGrade}
			STARTING{noGrade {System.out.println("Started add grade Property");}}
		}
		
		TRANSITIONS{
			noGrade -> badGrade [addGrade() \ grade > 10 || grade < 1 \ System.out.println("Grade error: " + grade + " Course code: " + c.getCourseCode());]
			okGrade -> badGrade [addGrade() \ grade > 10 || grade < 1 \ System.out.println("Grade error: " + grade + " Course code: " + c.getCourseCode());]
			noGrade -> okGrade [addGrade() \\ System.out.println("Grade Added: " + grade + " Course code: " + c.getCourseCode());]
			okGrade -> okGrade [addGrade() \\ System.out.println("Grade Added: " + grade + " Course code: " + c.getCourseCode());]
		}
	}

	PROPERTY prop3 {
		STATES {
			BAD{badDelay}
			NORMAL{okDelay delayCount}
			STARTING{startDelay {System.out.println("Started data delay Property");}}
		}

		TRANSITIONS {
			startDelay -> delayCount [addGrade() \\ dataDelay.reset();]
			delayCount -> badDelay [dataDelayAt5() \\ System.out.println("Bad delay time! Time more than 5 seconds");]
			delayCount -> okDelay [addGradeUpdated()]
			okDelay -> delayCount [addGrade() \\ dataDelay.reset();]			
		}
	}

	FOREACH (Student s) {
		EVENTS {
			addCredits(Student s1, double credits) = {s1.addCredits(credits)} where {s = s1;}
				
			setCredits(Student s1, double credits) = {s1.setCredits(credits)} where {s = s1;}
				
			changeCredits() = {addCredits|setCredits}

		}

		PROPERTY prop2 {
			STATES {
				BAD {badState}
				STARTING {okCredits {System.out.println("Started credit Property");}}
			}

			TRANSITIONS {
				okCredits -> badState [changeCredits() \ credits < 0 \ System.out.println("Bad Credits! Credits less than 0. Amount: " + credits + " Student: " + s);]
				okCredits -> okCredits [changeCredits() \ credits >= 0 \ System.out.println("Credits amount: " + credits + " Student: " + s);]
			}
		}
	}

	
	
}
